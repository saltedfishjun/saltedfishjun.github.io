<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>咸鱼君的备忘录</title><link>https://saltedfishjun.github.io</link><description>咸鱼君的究极备忘录加博客</description><copyright>咸鱼君的备忘录</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://image.saltedfishjun.top/i/2024/07/12/n7hysr.gif</url><title>avatar</title><link>https://saltedfishjun.github.io</link></image><lastBuildDate>Thu, 25 Jul 2024 19:08:15 +0000</lastBuildDate><managingEditor>咸鱼君的备忘录</managingEditor><ttl>60</ttl><webMaster>咸鱼君的备忘录</webMaster><item><title>CloudFlare Saas 回源到 tunnel 的办法</title><link>https://saltedfishjun.github.io/post/CloudFlare%20Saas%20-hui-yuan-dao-%20tunnel%20-de-ban-fa.html</link><description># 1.正常接入SAAS #&#13;
在需要设定的域名下点击SSL/TSL选项，点击自定义主机名，添加一个回退源(这个回退源需要是你等下设定隧道的域名)&#13;
![QQ_1721932281112](https://github.com/user-attachments/assets/7620eb89-758e-418d-acc9-6b45cc6b9928)&#13;
# 2.tunnel绑定域名 #&#13;
1. 创建隧道，教程[👉](url=https://post.smzdm.com/p/axoekqw2/)&#13;
&gt; [!注意]&#13;
&gt; 创建隧道最后一步添加域名时应该为SAAS回退源设定的域名，在点击提交前按F12进行抓包&#13;
2. 点击提交后，在网络请求里面找到以`configurations`结尾的一个`PUT`请求，在请求上右键点击编辑并重发，把编辑页面拉到最下面会看到以下内容`--data-raw '{'config':{'ingress':[{'hostname':'你隧道的域名','service':'http://192.168.1.12','originRequest':{}},{'service':'http_status:404'}]}}'`&#13;
3. 我们需要复制这部分内容`{'hostname':'你隧道的域名','service':'http://192.168.1.12','originRequest':{}}`并粘贴到原本这部分内容后面并修改“你隧道的域名”修改完成后大致如下`--data-raw '{'config':{'ingress':[{'hostname':'隧道域名','service':'http://192.168.1.12','originRequest':{true}},{'hostname':'外部cnamme到saas回退源的域名','service':'http://192.168.1.12','originRequest':{true}},{'service':'http_status:404'}]}}'`&#13;
&gt; [!注意]&#13;
&gt; cname到回退源的域名可以是泛域名&#13;
4. 编辑完成后点击发送，如果正确的话你现在应该能看到有两个域名，一个为你隧道设定域名，一个为刚刚修改时添加的域名，到这一步就基本完成了&#13;
# 3.附加教程 #&#13;
1. SAAS回源加优选ip[👉](https://www.bilibili.com/video/BV1SM4m1176E/?spm_id_from=333.999.0.0&amp;vd_source=bbe346abc60e23243de9aec110386ef4)&#13;
2. CloudFlare Saas 回源到 tunnel 的办法[👉](https://www.nodeseek.com/post-98866-1)&#13;
3. 本地添加网站利用如1Panel/BT之类的建站面版进行反代，把相应服务反代到你的cname到回源域名的那个域名即你想要访问的域名即可。</description><guid isPermaLink="true">https://saltedfishjun.github.io/post/CloudFlare%20Saas%20-hui-yuan-dao-%20tunnel%20-de-ban-fa.html</guid><pubDate>Thu, 25 Jul 2024 18:43:38 +0000</pubDate></item><item><title>常用小计</title><link>https://saltedfishjun.github.io/post/chang-yong-xiao-ji.html</link><description>视频嵌入&#13;
```&#13;
`Gmeek-html&lt;iframe src='//player.bilibili.com/player.html?isOutside=true&amp;aid=1706123415&amp;bvid=BV1cT421k7nr&amp;cid=1615203372&amp;p=1' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true' width='100%' height='460px'&gt;&lt;/iframe&gt;`&#13;
```&#13;
`Gmeek-html&lt;iframe src='//player.bilibili.com/player.html?isOutside=true&amp;aid=1706123415&amp;bvid=BV1cT421k7nr&amp;cid=1615203372&amp;p=1' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true' width='100%' height='460px'&gt;&lt;/iframe&gt;`&#13;
强调语法&#13;
```&#13;
&gt; [!NOTE]&#13;
&gt; Useful information that users should know, even when skimming content.&#13;
&#13;
&gt; [!TIP]&#13;
&gt; Helpful advice for doing things better or more easily.&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; Key information users need to know to achieve their goal.&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; Urgent info that needs immediate user attention to avoid problems.&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; Advises about risks or negative outcomes of certain actions.&#13;
```&#13;
&gt; [!NOTE]&#13;
&gt; Useful information that users should know, even when skimming content.&#13;
&#13;
&gt; [!TIP]&#13;
&gt; Helpful advice for doing things better or more easily.&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; Key information users need to know to achieve their goal.&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; Urgent info that needs immediate user attention to avoid problems.&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; Advises about risks or negative outcomes of certain actions.。</description><guid isPermaLink="true">https://saltedfishjun.github.io/post/chang-yong-xiao-ji.html</guid><pubDate>Sat, 20 Jul 2024 01:51:09 +0000</pubDate></item><item><title>MC各种服务端</title><link>https://saltedfishjun.github.io/post/MC-ge-zhong-fu-wu-duan.html</link><description># MC各种服务端&#13;
&#13;
这里是说明文档，这里会简单介绍各个核心以及插件。</description><guid isPermaLink="true">https://saltedfishjun.github.io/post/MC-ge-zhong-fu-wu-duan.html</guid><pubDate>Fri, 19 Jul 2024 15:55:52 +0000</pubDate></item><item><title>Deepin系统配置Iptables防火墙</title><link>https://saltedfishjun.github.io/post/Deepin-xi-tong-pei-zhi-Iptables-fang-huo-qiang.html</link><description># Deepin系统配置Iptables防火墙&#13;
&#13;
#### 最近不知道为啥重启后好多服务不能使用，然后发现docker的原因安装了iptables防火墙，经过百度解决后写下这篇文章以记录&#13;
&#13;
​`whereis iptables`​  #查看系统是否安装防火墙可以看到:&#13;
&#13;
```1c&#13;
iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz #表示已经安装iptables&#13;
apt-get install iptables #如果默认没有安装，请运行此命令安装防火墙&#13;
```&#13;
&#13;
​`iptables -L`​ #查看防火墙配置信息，显示如下:&#13;
&#13;
```1c&#13;
root@deepin:/home/saltedfishjun# iptables-save&#13;
# Generated by iptables-save v1.8.7 on Tue May 28 15:50:39 2024&#13;
*mangle&#13;
:PREROUTING ACCEPT [0:0]&#13;
:INPUT ACCEPT [0:0]&#13;
:FORWARD ACCEPT [0:0]&#13;
:OUTPUT ACCEPT [0:0]&#13;
:POSTROUTING ACCEPT [0:0]&#13;
:App - [0:0]&#13;
:Main - [0:0]&#13;
-A OUTPUT -j Main&#13;
-A Main -o lo -j RETURN&#13;
COMMIT&#13;
# Completed on Tue May 28 15:50:39 2024&#13;
# Generated by iptables-save v1.8.7 on Tue May 28 15:50:39 2024&#13;
*filter&#13;
:INPUT ACCEPT [0:0]&#13;
:FORWARD DROP [0:0]&#13;
:OUTPUT ACCEPT [0:0]&#13;
:DOCKER - [0:0]&#13;
:DOCKER-ISOLATION-STAGE-1 - [0:0]&#13;
:DOCKER-ISOLATION-STAGE-2 - [0:0]&#13;
:DOCKER-USER - [0:0]&#13;
-A INPUT -j NFQUEUE --queue-num 0&#13;
-A INPUT -j ACCEPT&#13;
-A INPUT -j ACCEPT&#13;
-A FORWARD -j DOCKER-USER&#13;
-A FORWARD -j DOCKER-ISOLATION-STAGE-1&#13;
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT&#13;
-A FORWARD -o docker0 -j DOCKER&#13;
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT&#13;
-A FORWARD -i docker0 -o docker0 -j ACCEPT&#13;
-A FORWARD -o br-521679a0d583 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT&#13;
-A FORWARD -o br-521679a0d583 -j DOCKER&#13;
-A FORWARD -i br-521679a0d583 ! -o br-521679a0d583 -j ACCEPT&#13;
-A FORWARD -i br-521679a0d583 -o br-521679a0d583 -j ACCEPT&#13;
-A DOCKER -d 172.18.0.2/32 ! -i br-521679a0d583 -o br-521679a0d583 -p tcp -m tcp --dport 80 -j ACCEPT&#13;
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 6806 -j ACCEPT&#13;
-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 3000 -j ACCEPT&#13;
-A DOCKER -d 172.18.0.3/32 ! -i br-521679a0d583 -o br-521679a0d583 -p tcp -m tcp --dport 80 -j ACCEPT&#13;
-A DOCKER -d 172.17.0.4/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 90 -j ACCEPT&#13;
-A DOCKER -d 172.17.0.4/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT&#13;
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2&#13;
-A DOCKER-ISOLATION-STAGE-1 -i br-521679a0d583 ! -o br-521679a0d583 -j DOCKER-ISOLATION-STAGE-2&#13;
-A DOCKER-ISOLATION-STAGE-1 -j RETURN&#13;
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP&#13;
-A DOCKER-ISOLATION-STAGE-2 -o br-521679a0d583 -j DROP&#13;
-A DOCKER-ISOLATION-STAGE-2 -j RETURN&#13;
-A DOCKER-USER -j RETURN&#13;
COMMIT&#13;
# Completed on Tue May 28 15:50:39 2024&#13;
# Generated by iptables-save v1.8.7 on Tue May 28 15:50:39 2024&#13;
*nat&#13;
:PREROUTING ACCEPT [0:0]&#13;
:INPUT ACCEPT [0:0]&#13;
:OUTPUT ACCEPT [0:0]&#13;
:POSTROUTING ACCEPT [0:0]&#13;
:DOCKER - [0:0]&#13;
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER&#13;
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER&#13;
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE&#13;
-A POSTROUTING -s 172.18.0.0/16 ! -o br-521679a0d583 -j MASQUERADE&#13;
-A POSTROUTING -s 172.18.0.2/32 -d 172.18.0.2/32 -p tcp -m tcp --dport 80 -j MASQUERADE&#13;
-A POSTROUTING -s 172.17.0.2/32 -d 172.17.0.2/32 -p tcp -m tcp --dport 6806 -j MASQUERADE&#13;
-A POSTROUTING -s 172.17.0.3/32 -d 172.17.0.3/32 -p tcp -m tcp --dport 3000 -j MASQUERADE&#13;
-A POSTROUTING -s 172.18.0.3/32 -d 172.18.0.3/32 -p tcp -m tcp --dport 80 -j MASQUERADE&#13;
-A POSTROUTING -s 172.17.0.4/32 -d 172.17.0.4/32 -p tcp -m tcp --dport 90 -j MASQUERADE&#13;
-A POSTROUTING -s 172.17.0.4/32 -d 172.17.0.4/32 -p tcp -m tcp --dport 80 -j MASQUERADE&#13;
-A DOCKER -i docker0 -j RETURN&#13;
-A DOCKER -i br-521679a0d583 -j RETURN&#13;
-A DOCKER ! -i br-521679a0d583 -p tcp -m tcp --dport 8880 -j DNAT --to-destination 172.18.0.2:80&#13;
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 6806 -j DNAT --to-destination 172.17.0.2:6806&#13;
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 3004 -j DNAT --to-destination 172.17.0.3:3000&#13;
-A DOCKER ! -i br-521679a0d583 -p tcp -m tcp --dport 8089 -j DNAT --to-destination 172.18.0.3:80&#13;
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 90 -j DNAT --to-destination 172.17.0.4:90&#13;
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 88 -j DNAT --to-destination 172.17.0.4:80&#13;
COMMIT&#13;
# Completed on Tue May 28 15:50:39 2024&#13;
root@deepin:/home/saltedfishjun# iptables -A INPUT -j ACCEPTiptables -A INPUT -p tcp --dport 8888 -j ACCEPT&#13;
iptables v1.8.7 (nf_tables): Cannot use -A with -A&#13;
```&#13;
&#13;
可以发现开放的端口仅为常用端口，需要端口并未开放，我们添加自定义规则&#13;
&#13;
​`vim /etc/iptables/rules.v4`​添加以下内容(备注:80是指web服务器端口,3306是指MySQL数据库链接端口,22是指SSH远程管理端口.)&#13;
&#13;
```1c&#13;
*filter&#13;
:INPUT DROP [0:0]&#13;
:FORWARD ACCEPT [0:0]&#13;
:OUTPUT ACCEPT [0:0]&#13;
:syn-flood - [0:0]&#13;
-A INPUT -i lo -j ACCEPT&#13;
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT&#13;
-A INPUT -p tcp -m state --state NEW -m tcp --dport 0:65535 -j ACCEPT&#13;
-A INPUT -p udp -m state --state NEW -m udp --dport 0:65535 -j ACCEPT&#13;
-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT&#13;
-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT&#13;
-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood&#13;
-A INPUT -j REJECT --reject-with icmp-host-prohibited&#13;
-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN&#13;
-A syn-flood -j REJECT --reject-with icmp-port-unreachable&#13;
COMMIT&#13;
```&#13;
&#13;
​`iptables-restore &lt; /etc/iptables/rules.v4`​ #使防火墙规则生效&#13;
&#13;
`iptables -L -n`​查看规则是否生效.&#13;
&#13;
‍。</description><guid isPermaLink="true">https://saltedfishjun.github.io/post/Deepin-xi-tong-pei-zhi-Iptables-fang-huo-qiang.html</guid><pubDate>Fri, 19 Jul 2024 15:54:56 +0000</pubDate></item><item><title>清除桌面图标缓存脚本</title><link>https://saltedfishjun.github.io/post/qing-chu-zhuo-mian-tu-biao-huan-cun-jiao-ben.html</link><description># 清除桌面图标缓存脚本&#13;
&#13;
当桌面图标点击出现白色虚线框时可使用快速清除，新建文本文档粘贴进去后保存为`.bat`​文件双击运行即可&#13;
&#13;
```1c&#13;
@echo off&#13;
taskkill /f /im explorer.exe&#13;
CD /d %userprofile%\AppData\Local&#13;
DEL IconCache.db /a&#13;
start explorer.exe&#13;
cho&#13;
```&#13;
&#13;
‍。</description><guid isPermaLink="true">https://saltedfishjun.github.io/post/qing-chu-zhuo-mian-tu-biao-huan-cun-jiao-ben.html</guid><pubDate>Fri, 19 Jul 2024 15:54:12 +0000</pubDate></item><item><title>Deepin安装casaos</title><link>https://saltedfishjun.github.io/post/Deepin-an-zhuang-casaos.html</link><description># Deepin系统安装casaos&#13;
&#13;
## 一般在深度deepin系统下是无法使用CasaOS的会报错&#13;
&#13;
​![image](https://raw.githubusercontent.com/saltedfishjun/photo/main/picgo/20240608124003.png)​&#13;
&#13;
# 打补丁（安装2个依赖包）&#13;
&#13;
### 安装深度deepin缺少的依赖包udevil&#13;
&#13;
```1c&#13;
wget https://mirrors-i.tuna.tsinghua.edu.cn/debian/pool/main/u/udevil/udevil_0.4.4-3_amd64.deb&#13;
sudo dpkg -i udevil_0.4.4-3_amd64.deb&#13;
```&#13;
&#13;
### 安装深度deepin缺少的依赖包mergerfs&#13;
&#13;
```1c&#13;
wget https://mirrors.sohu.com/deepin/pool/main/m/mergerfs/mergerfs_2.24.2-4_amd64.deb&#13;
sudo dpkg -i mergerfs_2.24.2-4_amd64.deb&#13;
```&#13;
&#13;
由于CasaOS暂时没有适配深度deepin v23系统,但适配了标准的Debian 12。</description><guid isPermaLink="true">https://saltedfishjun.github.io/post/Deepin-an-zhuang-casaos.html</guid><pubDate>Fri, 19 Jul 2024 15:53:19 +0000</pubDate></item></channel></rss>